<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="09 - User management upon multi-layer approval" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504175372000</longProp>
        <longProp name="ThreadGroup.end_time">1504175372000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">259200</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ServerHost" elementType="Argument">
              <stringProp name="Argument.name">ServerHost</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.desc">Hostname of the server</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ServerPort" elementType="Argument">
              <stringProp name="Argument.name">ServerPort</stringProp>
              <stringProp name="Argument.value">9443</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Server Port</stringProp>
            </elementProp>
            <elementProp name="AdminUser" elementType="Argument">
              <stringProp name="Argument.name">AdminUser</stringProp>
              <stringProp name="Argument.value">admin</stringProp>
              <stringProp name="Argument.desc">Username of the Admin user</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AdminPassword" elementType="Argument">
              <stringProp name="Argument.name">AdminPassword</stringProp>
              <stringProp name="Argument.value">admin</stringProp>
              <stringProp name="Argument.desc">Password of the Admin user</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UserName" elementType="Argument">
              <stringProp name="Argument.name">UserName</stringProp>
              <stringProp name="Argument.value">sashinika</stringProp>
              <stringProp name="Argument.desc">UserName of the user applicable for approval process</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create System Users" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${AdminUser}</stringProp>
                <stringProp name="Authorization.password">${AdminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create a User for Manager Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot; xmlns:xsd=&quot;http://common.mgt.user.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addUser&gt;&#xd;
         &lt;ser:userName&gt;manageruser&lt;/ser:userName&gt;&#xd;
         &lt;ser:credential&gt;manageruser&lt;/ser:credential&gt;&#xd;
         &lt;!--ser:roleList&gt;Manager&lt;/ser:roleList--&gt;&#xd;
         &lt;ser:claims&gt;&#xd;
            &lt;xsd:claimURI&gt;http://wso2.org/claims/emailaddress&lt;/xsd:claimURI&gt;&#xd;
            &lt;xsd:value&gt;manager@wso2.com&lt;/xsd:value&gt;&#xd;
         &lt;/ser:claims&gt;&#xd;
         &lt;ser:profileName&gt;default&lt;/ser:profileName&gt;&#xd;
          &lt;ser:requirePasswordChange&gt;true&lt;/ser:requirePasswordChange&gt;&#xd;
      &lt;/ser:addUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addUser</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create a User for Director Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot; xmlns:xsd=&quot;http://common.mgt.user.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addUser&gt;&#xd;
         &lt;ser:userName&gt;directoruser&lt;/ser:userName&gt;&#xd;
         &lt;ser:credential&gt;directoruser&lt;/ser:credential&gt;&#xd;
         &lt;!--ser:roleList&gt;Director&lt;/ser:roleList--&gt;&#xd;
         &lt;ser:claims&gt;&#xd;
            &lt;xsd:claimURI&gt;http://wso2.org/claims/emailaddress&lt;/xsd:claimURI&gt;&#xd;
            &lt;xsd:value&gt;director@wso2.com&lt;/xsd:value&gt;&#xd;
         &lt;/ser:claims&gt;&#xd;
         &lt;ser:profileName&gt;default&lt;/ser:profileName&gt;&#xd;
          &lt;ser:requirePasswordChange&gt;true&lt;/ser:requirePasswordChange&gt;&#xd;
      &lt;/ser:addUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addUser</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create System Roles" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${AdminUser}</stringProp>
                <stringProp name="Authorization.password">${AdminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Manager Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot; xmlns:xsd=&quot;http://dao.service.ws.um.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addRole&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:roleName&gt;Manager&lt;/ser:roleName&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;ser:userList&gt;manageruser&lt;/ser:userList&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;ser:permissions&gt;&#xd;
            &lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;&#xd;
            &lt;xsd:resourceId&gt;/permission/admin/login&lt;/xsd:resourceId&gt;&#xd;
         &lt;/ser:permissions&gt;&#xd;
         &lt;ser:permissions&gt;&#xd;
            &lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;&#xd;
            &lt;xsd:resourceId&gt;/permission/admin/manage/humantask/viewtasks&lt;/xsd:resourceId&gt;&#xd;
         &lt;/ser:permissions&gt;&#xd;
         &lt;ser:permissions&gt;&#xd;
            &lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;&#xd;
            &lt;xsd:resourceId&gt;/permission/admin/manage/identity/workflow/profile/view&lt;/xsd:resourceId&gt;&#xd;
         &lt;/ser:permissions&gt;&#xd;
      &lt;/ser:addRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRole</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Director Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot; xmlns:xsd=&quot;http://dao.service.ws.um.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addRole&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:roleName&gt;Director&lt;/ser:roleName&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;ser:userList&gt;directoruser&lt;/ser:userList&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;ser:permissions&gt;&#xd;
            &lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;&#xd;
            &lt;xsd:resourceId&gt;/permission/admin/login&lt;/xsd:resourceId&gt;&#xd;
         &lt;/ser:permissions&gt;&#xd;
         &lt;ser:permissions&gt;&#xd;
            &lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;&#xd;
            &lt;xsd:resourceId&gt;/permission/admin/manage/humantask/viewtasks&lt;/xsd:resourceId&gt;&#xd;
         &lt;/ser:permissions&gt;&#xd;
         &lt;ser:permissions&gt;&#xd;
            &lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;&#xd;
            &lt;xsd:resourceId&gt;/permission/admin/manage/identity/workflow/profile/view&lt;/xsd:resourceId&gt;&#xd;
         &lt;/ser:permissions&gt;&#xd;
      &lt;/ser:addRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRole</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Employee Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot; xmlns:xsd=&quot;http://dao.service.ws.um.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addRole&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:roleName&gt;Employee&lt;/ser:roleName&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;ser:userList&gt;admin&lt;/ser:userList&gt;&#xd;
         &lt;!--Zero or more repetitions:--&gt;&#xd;
         &lt;ser:permissions&gt;&#xd;
            &lt;xsd:action&gt;ui.execute&lt;/xsd:action&gt;&#xd;
            &lt;xsd:resourceId&gt;/permission/admin/login&lt;/xsd:resourceId&gt;&#xd;
         &lt;/ser:permissions&gt;&#xd;
      &lt;/ser:addRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRole</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Workflow Approval Process" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${AdminUser}</stringProp>
                <stringProp name="Authorization.password">${AdminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Workflow Definition for multi role approval" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://mgt.workflow.identity.carbon.wso2.org/xsd&quot; xmlns:xsd1=&quot;http://dto.mgt.workflow.identity.carbon.wso2.org/xsd&quot; xmlns:xsd2=&quot;http://metadata.bean.mgt.workflow.identity.carbon.wso2.org/xsd&quot; xmlns:xsd3=&quot;http://bean.mgt.workflow.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addWorkflow&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:workflow&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:template&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:description&gt;The operation should be approved by an authorized person with given role, to complete.&lt;/xsd1:description&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:name&gt;Multi-Step User/Role Approval&lt;/xsd1:name&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:parametersMetaData&gt;&#xd;
                  &lt;!--Zero or more repetitions:--&gt;&#xd;
                  &lt;xsd2:parameterMetaData&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:customInputType&gt;null&lt;/xsd2:customInputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:dataType&gt;null&lt;/xsd2:dataType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:defaultValue&gt;null&lt;/xsd2:defaultValue&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:displayName&gt;User and Role&lt;/xsd2:displayName&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                           &lt;xsd2:inputData&gt;&#xd;
                        &lt;!--Optional:--&gt;&#xd;
                        &lt;xsd2:mapType&gt;&#xd;
                           &lt;!--Zero or more repetitions:--&gt;&#xd;
                           &lt;xsd2:item&gt;&#xd;
                              &lt;!--Optional:--&gt;&#xd;
                              &lt;xsd2:key&gt;null&lt;/xsd2:key&gt;&#xd;
                              &lt;!--Optional:--&gt;&#xd;
                              &lt;xsd2:value&gt;null&lt;/xsd2:value&gt;&#xd;
                           &lt;/xsd2:item&gt;&#xd;
                        &lt;/xsd2:mapType&gt;&#xd;
                     &lt;/xsd2:inputData&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:inputType&gt;Multiple_Steps_User_Role&lt;/xsd2:inputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isInputDataRequired&gt;false&lt;/xsd2:isInputDataRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isRequired&gt;true&lt;/xsd2:isRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:name&gt;UserAndRole&lt;/xsd2:name&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:regExForValidate&gt;null&lt;/xsd2:regExForValidate&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:validate&gt;true&lt;/xsd2:validate&gt;&#xd;
                  &lt;/xsd2:parameterMetaData&gt;&#xd;
               &lt;/xsd1:parametersMetaData&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:templateId&gt;MultiStepApprovalTemplate&lt;/xsd1:templateId&gt;&#xd;
            &lt;/xsd1:template&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:templateId&gt;MultiStepApprovalTemplate&lt;/xsd1:templateId&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;xsd1:templateParameters&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:holder&gt;Template&lt;/xsd3:holder&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramName&gt;UserAndRole&lt;/xsd3:paramName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramValue&gt;Manager&lt;/xsd3:paramValue&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:qName&gt;UserAndRole-step-1-roles&lt;/xsd3:qName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:workflowId&gt;null&lt;/xsd3:workflowId&gt;&#xd;
            &lt;/xsd1:templateParameters&gt;&#xd;
&lt;xsd1:templateParameters&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:holder&gt;Template&lt;/xsd3:holder&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramName&gt;UserAndRole&lt;/xsd3:paramName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramValue&gt;&lt;/xsd3:paramValue&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:qName&gt;UserAndRole-step-1-users&lt;/xsd3:qName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:workflowId&gt;null&lt;/xsd3:workflowId&gt;&#xd;
            &lt;/xsd1:templateParameters&gt;&#xd;
&lt;xsd1:templateParameters&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:holder&gt;Template&lt;/xsd3:holder&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramName&gt;UserAndRole&lt;/xsd3:paramName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramValue&gt;&lt;/xsd3:paramValue&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:qName&gt;UserAndRole-step-2-users&lt;/xsd3:qName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:workflowId&gt;null&lt;/xsd3:workflowId&gt;&#xd;
            &lt;/xsd1:templateParameters&gt;&#xd;
&lt;xsd1:templateParameters&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:holder&gt;Template&lt;/xsd3:holder&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramName&gt;UserAndRole&lt;/xsd3:paramName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramValue&gt;Director&lt;/xsd3:paramValue&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:qName&gt;UserAndRole-step-2-roles&lt;/xsd3:qName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:workflowId&gt;null&lt;/xsd3:workflowId&gt;&#xd;
            &lt;/xsd1:templateParameters&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:workflowDescription&gt;This workflow is used to approve the user creation via multi role approval process&lt;/xsd1:workflowDescription&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:workflowId&gt;d1eec163-1123-4ffc-8d37-5683efacf635&lt;/xsd1:workflowId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:workflowImpl&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:parametersMetaData&gt;&#xd;
                  &lt;!--Zero or more repetitions:--&gt;&#xd;
                  &lt;xsd2:parameterMetaData&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:customInputType&gt;null&lt;/xsd2:customInputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:dataType&gt;null&lt;/xsd2:dataType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:defaultValue&gt;null&lt;/xsd2:defaultValue&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:displayName&gt;BPS Profile&lt;/xsd2:displayName&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:inputData&gt;&#xd;
                        &lt;!--Optional:--&gt;&#xd;
                        &lt;xsd2:mapType&gt;&#xd;
                           &lt;!--Zero or more repetitions:--&gt;&#xd;
                           &lt;xsd2:item&gt;&#xd;
                              &lt;!--Optional:--&gt;&#xd;
                              &lt;xsd2:key&gt;embeded_bps&lt;/xsd2:key&gt;&#xd;
                              &lt;!--Optional:--&gt;&#xd;
                              &lt;xsd2:value&gt;embeded_bps&lt;/xsd2:value&gt;&#xd;
                           &lt;/xsd2:item&gt;&#xd;
                        &lt;/xsd2:mapType&gt;&#xd;
                     &lt;/xsd2:inputData&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:inputType&gt;Select&lt;/xsd2:inputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isInputDataRequired&gt;true&lt;/xsd2:isInputDataRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isRequired&gt;true&lt;/xsd2:isRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:name&gt;BPSProfile&lt;/xsd2:name&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:regExForValidate&gt;null&lt;/xsd2:regExForValidate&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:validate&gt;true&lt;/xsd2:validate&gt;&#xd;
                  &lt;/xsd2:parameterMetaData&gt;&#xd;
&lt;xsd2:parameterMetaData&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:customInputType&gt;null&lt;/xsd2:customInputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:dataType&gt;String&lt;/xsd2:dataType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:defaultValue&gt;null&lt;/xsd2:defaultValue&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:displayName&gt;Task Subject&lt;/xsd2:displayName&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:inputType&gt;Text&lt;/xsd2:inputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isInputDataRequired&gt;false&lt;/xsd2:isInputDataRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isRequired&gt;true&lt;/xsd2:isRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:name&gt;HTSubject&lt;/xsd2:name&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:regExForValidate&gt;null&lt;/xsd2:regExForValidate&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:validate&gt;true&lt;/xsd2:validate&gt;&#xd;
                  &lt;/xsd2:parameterMetaData&gt;&#xd;
&lt;xsd2:parameterMetaData&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:customInputType&gt;null&lt;/xsd2:customInputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:dataType&gt;String&lt;/xsd2:dataType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:defaultValue&gt;null&lt;/xsd2:defaultValue&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:displayName&gt;Task Detail&lt;/xsd2:displayName&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:inputType&gt;TextArea&lt;/xsd2:inputType&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isInputDataRequired&gt;false&lt;/xsd2:isInputDataRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:isRequired&gt;false&lt;/xsd2:isRequired&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:name&gt;HTDescription&lt;/xsd2:name&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:regExForValidate&gt;null&lt;/xsd2:regExForValidate&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;xsd2:validate&gt;true&lt;/xsd2:validate&gt;&#xd;
                  &lt;/xsd2:parameterMetaData&gt;&#xd;
               &lt;/xsd1:parametersMetaData&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:templateId&gt;MultiStepApprovalTemplate&lt;/xsd1:templateId&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:workflowImplId&gt;ApprovalWorkflow&lt;/xsd1:workflowImplId&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd1:workflowImplName&gt;ApprovalWorkflow&lt;/xsd1:workflowImplName&gt;&#xd;
            &lt;/xsd1:workflowImpl&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:workflowImplId&gt;ApprovalWorkflow&lt;/xsd1:workflowImplId&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;xsd1:workflowImplParameters&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:holder&gt;WorkflowImpl&lt;/xsd3:holder&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramName&gt;HTDescription&lt;/xsd3:paramName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramValue&gt;Please approve the given user for the system&lt;/xsd3:paramValue&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:qName&gt;HTDescription&lt;/xsd3:qName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:workflowId&gt;null&lt;/xsd3:workflowId&gt;&#xd;
            &lt;/xsd1:workflowImplParameters&gt;&#xd;
 &lt;xsd1:workflowImplParameters&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:holder&gt;WorkflowImpl&lt;/xsd3:holder&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramName&gt;HTSubject&lt;/xsd3:paramName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramValue&gt;Approve User Creation&lt;/xsd3:paramValue&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:qName&gt;HTSubject&lt;/xsd3:qName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:workflowId&gt;null&lt;/xsd3:workflowId&gt;&#xd;
            &lt;/xsd1:workflowImplParameters&gt;&#xd;
&lt;xsd1:workflowImplParameters&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:holder&gt;WorkflowImpl&lt;/xsd3:holder&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramName&gt;BPSProfile&lt;/xsd3:paramName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:paramValue&gt;embeded_bps&lt;/xsd3:paramValue&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:qName&gt;BPSProfile&lt;/xsd3:qName&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;xsd3:workflowId&gt;null&lt;/xsd3:workflowId&gt;&#xd;
            &lt;/xsd1:workflowImplParameters&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:workflowName&gt;Approve_User_Creation_WorkFlow&lt;/xsd1:workflowName&gt;&#xd;
         &lt;/xsd:workflow&gt;&#xd;
      &lt;/xsd:addWorkflow&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/WorkflowAdminService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addWorkflow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1200</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Workflow Association" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://mgt.workflow.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addAssociation&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:associationName&gt;User_Approval_Workflow_Association&lt;/xsd:associationName&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:workflowId&gt;d1eec163-1123-4ffc-8d37-5683efacf635&lt;/xsd:workflowId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:eventId&gt;ADD_USER&lt;/xsd:eventId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:condition&gt;//*[local-name()=&apos;parameter&apos;][@name=&apos;Roles&apos;]/*[local-name()=&apos;value&apos;]/*[local-name()=&apos;itemValue&apos;]/text()=&apos;Employee&apos;&lt;/xsd:condition&gt;&#xd;
      &lt;/xsd:addAssociation&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/WorkflowAdminService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addAssociation</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1200</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Creating a User for Approval" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${AdminUser}</stringProp>
                <stringProp name="Authorization.password">${AdminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create a User for Employee Role (Verify Workflow)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot; xmlns:xsd=&quot;http://common.mgt.user.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:addUser&gt;&#xd;
         &lt;ser:userName&gt;${UserName}&lt;/ser:userName&gt;&#xd;
         &lt;ser:credential&gt;welcome&lt;/ser:credential&gt;&#xd;
         &lt;ser:roleList&gt;Employee&lt;/ser:roleList&gt;&#xd;
         &lt;ser:claims&gt;&#xd;
            &lt;xsd:claimURI&gt;http://wso2.org/claims/emailaddress&lt;/xsd:claimURI&gt;&#xd;
            &lt;xsd:value&gt;sashika@wso2.com&lt;/xsd:value&gt;&#xd;
         &lt;/ser:claims&gt;&#xd;
         &lt;ser:profileName&gt;default&lt;/ser:profileName&gt;&#xd;
          &lt;ser:requirePasswordChange&gt;true&lt;/ser:requirePasswordChange&gt;&#xd;
      &lt;/ser:addUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addUser</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">60000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Multi-Role based Approval (Execute ONLY IF user creation successful)" enabled="true">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Manager] Search pending approvals " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot; xmlns:ns1=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:simpleQuery&gt;&#xd;
         &lt;ns:simpleQueryInput&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;ns1:status&gt;RESERVED&lt;/ns1:status&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:createdDate&gt;?&lt;/ns1:createdDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:undatedDate&gt;?&lt;/ns1:undatedDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:taskName&gt;?&lt;/ns1:taskName--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageSize&gt;?&lt;/ns1:pageSize--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageNumber&gt;?&lt;/ns1:pageNumber--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:simpleQueryCategory&gt;?&lt;/ns1:simpleQueryCategory--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrder&gt;?&lt;/ns1:queryOrder--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrderBy&gt;?&lt;/ns1:queryOrderBy--&gt;&#xd;
         &lt;/ns:simpleQueryInput&gt;&#xd;
      &lt;/ns:simpleQuery&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic bWFuYWdlcnVzZXI6bWFuYWdlcnVzZXI=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:simpleQuery</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">Task ID not found</stringProp>
              <stringProp name="XPathExtractor.refname">PendingApprovalID</stringProp>
              <stringProp name="XPathExtractor.matchNumber"></stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;id&apos;]</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">600</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Manager] Start the approval task" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:start&gt;&#xd;
         &lt;ns:identifier&gt;${PendingApprovalID}&lt;/ns:identifier&gt;&#xd;
      &lt;/ns:start&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic bWFuYWdlcnVzZXI6bWFuYWdlcnVzZXI=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:start</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">600</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Manager] Approve the task" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:complete&gt;&#xd;
         &lt;ns:identifier&gt;${PendingApprovalID}&lt;/ns:identifier&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ns:taskData&gt;&lt;![CDATA[&lt;sch:ApprovalCBData xmlns:sch=&quot;http://ht.bpel.mgt.workflow.identity.carbon.wso2.org/wsdl/schema&quot;&gt;&lt;approvalStatus&gt;APPROVED&lt;/approvalStatus&gt;&lt;/sch:ApprovalCBData&gt;]]&gt;&lt;/ns:taskData&gt;&#xd;
      &lt;/ns:complete&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic bWFuYWdlcnVzZXI6bWFuYWdlcnVzZXI=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:complete</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">600</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Manager] Search for COMPLETED tasks " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot; xmlns:ns1=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:simpleQuery&gt;&#xd;
         &lt;ns:simpleQueryInput&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;ns1:status&gt;COMPLETED&lt;/ns1:status&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:createdDate&gt;?&lt;/ns1:createdDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:undatedDate&gt;?&lt;/ns1:undatedDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:taskName&gt;?&lt;/ns1:taskName--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageSize&gt;?&lt;/ns1:pageSize--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageNumber&gt;?&lt;/ns1:pageNumber--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:simpleQueryCategory&gt;?&lt;/ns1:simpleQueryCategory--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrder&gt;?&lt;/ns1:queryOrder--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrderBy&gt;?&lt;/ns1:queryOrderBy--&gt;&#xd;
         &lt;/ns:simpleQueryInput&gt;&#xd;
      &lt;/ns:simpleQuery&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This is to verify that the task completed by the Manager is in COMPLETED status</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic bWFuYWdlcnVzZXI6bWFuYWdlcnVzZXI=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:simpleQuery</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1887259839">${PendingApprovalID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Scope.variable">${PendingApprovalID}</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">600</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Director] Search pending approvals " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot; xmlns:ns1=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:simpleQuery&gt;&#xd;
         &lt;ns:simpleQueryInput&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;ns1:status&gt;RESERVED&lt;/ns1:status&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:createdDate&gt;?&lt;/ns1:createdDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:undatedDate&gt;?&lt;/ns1:undatedDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:taskName&gt;?&lt;/ns1:taskName--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageSize&gt;?&lt;/ns1:pageSize--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageNumber&gt;?&lt;/ns1:pageNumber--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:simpleQueryCategory&gt;?&lt;/ns1:simpleQueryCategory--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrder&gt;?&lt;/ns1:queryOrder--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrderBy&gt;?&lt;/ns1:queryOrderBy--&gt;&#xd;
         &lt;/ns:simpleQueryInput&gt;&#xd;
      &lt;/ns:simpleQuery&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ZGlyZWN0b3J1c2VyOmRpcmVjdG9ydXNlcg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:simpleQuery</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">Unable to find the Task ID for Director</stringProp>
              <stringProp name="XPathExtractor.refname">DirectorPendingApprovalID</stringProp>
              <stringProp name="XPathExtractor.matchNumber"></stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;id&apos;]</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Director] Start the approval task" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:start&gt;&#xd;
         &lt;ns:identifier&gt;${DirectorPendingApprovalID}&lt;/ns:identifier&gt;&#xd;
      &lt;/ns:start&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ZGlyZWN0b3J1c2VyOmRpcmVjdG9ydXNlcg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:start</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Director] Approve the task" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:complete&gt;&#xd;
         &lt;ns:identifier&gt;${DirectorPendingApprovalID}&lt;/ns:identifier&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ns:taskData&gt;&lt;![CDATA[&lt;sch:ApprovalCBData xmlns:sch=&quot;http://ht.bpel.mgt.workflow.identity.carbon.wso2.org/wsdl/schema&quot;&gt;&lt;approvalStatus&gt;APPROVED&lt;/approvalStatus&gt;&lt;/sch:ApprovalCBData&gt;]]&gt;&lt;/ns:taskData&gt;&#xd;
      &lt;/ns:complete&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ZGlyZWN0b3J1c2VyOmRpcmVjdG9ydXNlcg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:complete</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">600</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Director] Search for COMPLETED tasks " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/api/200803&quot; xmlns:ns1=&quot;http://docs.oasis-open.org/ns/bpel4people/ws-humantask/types/200803&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:simpleQuery&gt;&#xd;
         &lt;ns:simpleQueryInput&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;ns1:status&gt;COMPLETED&lt;/ns1:status&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:createdDate&gt;?&lt;/ns1:createdDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:undatedDate&gt;?&lt;/ns1:undatedDate--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:taskName&gt;?&lt;/ns1:taskName--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageSize&gt;?&lt;/ns1:pageSize--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:pageNumber&gt;?&lt;/ns1:pageNumber--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:simpleQueryCategory&gt;?&lt;/ns1:simpleQueryCategory--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrder&gt;?&lt;/ns1:queryOrder--&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;!--ns1:queryOrderBy&gt;?&lt;/ns1:queryOrderBy--&gt;&#xd;
         &lt;/ns:simpleQueryInput&gt;&#xd;
      &lt;/ns:simpleQuery&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/HumanTaskClientAPIAdmin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This is to verify that the task completed by the Director is in COMPLETED status</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ZGlyZWN0b3J1c2VyOmRpcmVjdG9ydXNlcg==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:simpleQuery</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1746201195">${DirectorPendingApprovalID}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Scope.variable">${PendingApprovalID}</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1200</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Verification] Authenticating the User after approval" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://authentication.services.core.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:login&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;aut:username&gt;${UserName}&lt;/aut:username&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;aut:password&gt;welcome&lt;/aut:password&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;aut:remoteAddress&gt;${ServerHost}&lt;/aut:remoteAddress&gt;&#xd;
      &lt;/aut:login&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
          <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/AuthenticationAdmin</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">In this stage use should be authenticated</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${AdminUser}</stringProp>
                <stringProp name="Authorization.password">${AdminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:login</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Scope.variable">${PendingApprovalID}</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1200</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Cleaning the artefacts" enabled="true"/>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url"></stringProp>
                <stringProp name="Authorization.username">${AdminUser}</stringProp>
                <stringProp name="Authorization.password">${AdminPassword}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List available Workflow Association " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://mgt.workflow.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:listAssociations&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:workflowId&gt;d1eec163-1123-4ffc-8d37-5683efacf635&lt;/xsd:workflowId&gt;&#xd;
      &lt;/xsd:listAssociations&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/WorkflowAdminService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:listAssociations</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default">AssociationID not found</stringProp>
              <stringProp name="XPathExtractor.refname">AssociationID</stringProp>
              <stringProp name="XPathExtractor.matchNumber"></stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;associationId&apos;]</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Workflow Definition" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://mgt.workflow.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:removeWorkflow&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:id&gt;d1eec163-1123-4ffc-8d37-5683efacf635&lt;/xsd:id&gt;&#xd;
      &lt;/xsd:removeWorkflow&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/WorkflowAdminService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:removeWorkflow</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Workflow Associations" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://mgt.workflow.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:removeAssociation&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:associationId&gt;${AssociationID}&lt;/xsd:associationId&gt;&#xd;
      &lt;/xsd:removeAssociation&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/WorkflowAdminService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:removeAssociation</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Employee Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteRole&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:roleName&gt;Employee&lt;/ser:roleName&gt;&#xd;
      &lt;/ser:deleteRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteRole</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Manager Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteRole&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:roleName&gt;Manager&lt;/ser:roleName&gt;&#xd;
      &lt;/ser:deleteRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteRole</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Director Role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteRole&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:roleName&gt;Director&lt;/ser:roleName&gt;&#xd;
      &lt;/ser:deleteRole&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteRole</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Manager User" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteUser&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:userName&gt;manageruser&lt;/ser:userName&gt;&#xd;
      &lt;/ser:deleteUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteUser</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Director User" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteUser&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:userName&gt;directoruser&lt;/ser:userName&gt;&#xd;
      &lt;/ser:deleteUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteUser</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete User created for approval verification" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://service.ws.um.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ser:deleteUser&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;ser:userName&gt;${UserName}&lt;/ser:userName&gt;&#xd;
      &lt;/ser:deleteUser&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerHost}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/RemoteUserStoreManagerService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:deleteUser</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/sashika/Apps/Applications/IS/identity-test-integration/solution09/target/jmeter/results/20171018-MultilayerApproval.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
